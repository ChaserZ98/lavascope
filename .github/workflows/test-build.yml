name: Test Build
run-name: "Test Build: ${{ github.event_name == 'pull_request' && github.event.pull_request.title || github.event_name }}"
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    if: ${{ !startsWith(github.head_ref, 'release/')}}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos-x86_64, macos-arm, windows]
        include:
          - build: macos-arm
            os: macos-latest
            args: "--target aarch64-apple-darwin"
          - build: macos-x86_64
            os: macos-latest
            args: "--target x86_64-apple-darwin"
          - build: linux
            os: ubuntu-22.04
            args: ""
          - build: windows
            os: "windows-latest"
            args: ""
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install dependencies (ubuntu only)
        if: matrix.build == 'linux'
        run: |
          sudo apt update
          sudo apt install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: Install frontend dependencies
        run: bun install --frozen-lockfile
      - name: Build Tauri app
        id: tauri-build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tauriScript: bun run tauri
          args: ${{ matrix.args }}
      - name: Actifact list
        env:
          RELEASE_ACTIFACTS: ${{steps.tauri-build.outputs.artifactPaths}}
        uses: actions/github-script@v7
        with:
          script: |
            const artifactArray = JSON.parse(process.env.RELEASE_ACTIFACTS);
            for (const artifact of artifactArray) {
              console.log(`Artifact: ${artifact}`);
            }
