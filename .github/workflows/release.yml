name: Release Draft
run-name: "Release Attempt: ${{github.event.pull_request.title}}"
on:
  pull_request:
    branches:
      - main

jobs:
  create-release:
    if: startsWith(github.head_ref, 'release/')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ fromJson(steps.create-release.outputs.result).id }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: Create release draft
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${process.env.PACKAGE_VERSION}`,
              name: `${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return { id: data.id, html_url: data.html_url }
      - name: Release url
        env:
          RELEASE_URL: ${{fromJson(steps.create-release.outputs.result).html_url}}
        run: |
          echo "Release url: $RELEASE_URL"
  build-release:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos-x86_64, macos-arm, windows]
        include:
          - build: macos-arm
            os: macos-latest
            args: "--config src-tauri/build-config/tauri.macos.conf.json --target aarch64-apple-darwin"
          - build: macos-x86_64
            os: macos-latest
            args: "--config src-tauri/build-config/tauri.macos.conf.json --target x86_64-apple-darwin"
          - build: linux
            os: ubuntu-22.04
            args: ""
          - build: windows
            os: "windows-latest"
            args: "--config src-tauri/build-config/tauri.windows.conf.json"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install dependencies (ubuntu only)
        if: matrix.build == 'linux'
        run: |
          sudo apt update
          sudo apt install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ startsWith(matrix.build, 'macos') && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: Install frontend dependencies
        run: bun install --frozen-lockfile
      - name: Build Tauri app and upload assets to release
        id: tauri-build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tauriScript: bun run tauri
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
      - name: Actifact list
        env:
          RELEASE_ACTIFACTS: ${{steps.tauri-build.outputs.artifactPaths}}
        uses: actions/github-script@v7
        with:
          script: |
            const artifactArray = JSON.parse(process.env.RELEASE_ACTIFACTS);
            for (const artifact of artifactArray) {
              console.log(`Artifact: ${artifact}`);
            }
      - name: Release url
        env:
          RELEASE_URL: ${{steps.tauri-build.outputs.releaseHtmlUrl}}
        run: |
          echo "Release url: $RELEASE_URL"
