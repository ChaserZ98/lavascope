/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as AppRouteImport } from "./routes/_app";
import { Route as AppIndexRouteImport } from "./routes/_app/index";
import { Route as AppSettingsRouteImport } from "./routes/_app/settings";
import { Route as AppMyIpRouteImport } from "./routes/_app/my-ip";
import { Route as AppGroupsIndexRouteImport } from "./routes/_app/groups/index";
import { Route as AppGroupsIdRouteImport } from "./routes/_app/groups/$id";

const AppRoute = AppRouteImport.update({
  id: "/_app",
  getParentRoute: () => rootRouteImport,
} as any);
const AppIndexRoute = AppIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AppRoute,
} as any);
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => AppRoute,
} as any);
const AppMyIpRoute = AppMyIpRouteImport.update({
  id: "/my-ip",
  path: "/my-ip",
  getParentRoute: () => AppRoute,
} as any);
const AppGroupsIndexRoute = AppGroupsIndexRouteImport.update({
  id: "/groups/",
  path: "/groups/",
  getParentRoute: () => AppRoute,
} as any);
const AppGroupsIdRoute = AppGroupsIdRouteImport.update({
  id: "/groups/$id",
  path: "/groups/$id",
  getParentRoute: () => AppRoute,
} as any);

export interface FileRoutesByFullPath {
  "/my-ip": typeof AppMyIpRoute;
  "/settings": typeof AppSettingsRoute;
  "/": typeof AppIndexRoute;
  "/groups/$id": typeof AppGroupsIdRoute;
  "/groups": typeof AppGroupsIndexRoute;
}
export interface FileRoutesByTo {
  "/my-ip": typeof AppMyIpRoute;
  "/settings": typeof AppSettingsRoute;
  "/": typeof AppIndexRoute;
  "/groups/$id": typeof AppGroupsIdRoute;
  "/groups": typeof AppGroupsIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/_app": typeof AppRouteWithChildren;
  "/_app/my-ip": typeof AppMyIpRoute;
  "/_app/settings": typeof AppSettingsRoute;
  "/_app/": typeof AppIndexRoute;
  "/_app/groups/$id": typeof AppGroupsIdRoute;
  "/_app/groups/": typeof AppGroupsIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/my-ip" | "/settings" | "/" | "/groups/$id" | "/groups";
  fileRoutesByTo: FileRoutesByTo;
  to: "/my-ip" | "/settings" | "/" | "/groups/$id" | "/groups";
  id:
    | "__root__"
    | "/_app"
    | "/_app/my-ip"
    | "/_app/settings"
    | "/_app/"
    | "/_app/groups/$id"
    | "/_app/groups/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_app": {
      id: "/_app";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AppRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_app/": {
      id: "/_app/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof AppIndexRouteImport;
      parentRoute: typeof AppRoute;
    };
    "/_app/settings": {
      id: "/_app/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof AppSettingsRouteImport;
      parentRoute: typeof AppRoute;
    };
    "/_app/my-ip": {
      id: "/_app/my-ip";
      path: "/my-ip";
      fullPath: "/my-ip";
      preLoaderRoute: typeof AppMyIpRouteImport;
      parentRoute: typeof AppRoute;
    };
    "/_app/groups/": {
      id: "/_app/groups/";
      path: "/groups";
      fullPath: "/groups";
      preLoaderRoute: typeof AppGroupsIndexRouteImport;
      parentRoute: typeof AppRoute;
    };
    "/_app/groups/$id": {
      id: "/_app/groups/$id";
      path: "/groups/$id";
      fullPath: "/groups/$id";
      preLoaderRoute: typeof AppGroupsIdRouteImport;
      parentRoute: typeof AppRoute;
    };
  }
}

interface AppRouteChildren {
  AppMyIpRoute: typeof AppMyIpRoute;
  AppSettingsRoute: typeof AppSettingsRoute;
  AppIndexRoute: typeof AppIndexRoute;
  AppGroupsIdRoute: typeof AppGroupsIdRoute;
  AppGroupsIndexRoute: typeof AppGroupsIndexRoute;
}

const AppRouteChildren: AppRouteChildren = {
  AppMyIpRoute: AppMyIpRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
  AppGroupsIdRoute: AppGroupsIdRoute,
  AppGroupsIndexRoute: AppGroupsIndexRoute,
};

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
